/*---------------------------------------------------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     |
    \\  /    A nd           | Copyright (C) 2011-2013 OpenFOAM Foundation
     \\/     M anipulation  |
-------------------------------------------------------------------------------
License
    This file is part of OpenFOAM.

    OpenFOAM is free software: you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
    for more details.

    You should have received a copy of the GNU General Public License
    along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.

\*---------------------------------------------------------------------------*/

#include "soundPressureSampler.H"
#include "volFields.H"
#include "surfaceFields.H"
#include "ListListOps.H"
#include "stringListOps.H"

// * * * * * * * * * * * * * Private Member Functions * * * * * * * * * * * //

template<class Type>
void Foam::soundPressureSampler::sampleAndWrite
(
    const GeometricField<Type, fvPatchField, volMesh>& vField,
    const label surfI,
    autoPtr <OFstream>& os,
    scalar cTime
) const
{

    // interpolator for this field
    autoPtr<interpolation<Type> > interpolatorPtr;
    Field<Type> values;

    const sampledSurface& surface = controlSurfaces_.operator[](surfI);

    if (surface.interpolate())
    {
        if (interpolatorPtr.empty())
        {
            interpolatorPtr = interpolation<Type>::New
            (
                interpolationScheme_,
                vField
            );
        }
        values = surface.interpolate(interpolatorPtr());
    }
    else
    {
        values = surface.sample(vField);
    }

    writeSurface(values, surfI, os, cTime);
}


template<class Type>
void Foam::soundPressureSampler::writeSurface
(
    const Field<Type>& values,
    const label surfI,
    autoPtr <OFstream>& os,
    scalar cTime
) const
{
    //Pout << "in collection" << nl;

    if (Pstream::parRun())
    {
        //Pout << "before collection" << nl;

        // Collect values from all processors
        //Pout << "1" << nl;
        List<Field<Type> > gatheredValues(Pstream::nProcs());
        //Pout << "2" << nl;
        gatheredValues[Pstream::myProcNo()] = values;
        //Pout << "3" << nl;
        Pstream::gatherList(gatheredValues);
        //Pout << "ok" << nl;

        if (Pstream::master())
        {
            //Pout << "just for master" << nl;
            // Combine values into single field
            Field<Type> allValues
            (
                ListListOps::combine<Field<Type> >
                (
                    gatheredValues,
                    accessOp<Field<Type> >()
                )
            );

            // Renumber (point data) to correspond to merged points
            if (mergeList_[surfI].pointsMap.size() == allValues.size())
            {
                inplaceReorder(mergeList_[surfI].pointsMap, allValues);
                allValues.setSize(mergeList_[surfI].points.size());
            }

            // Write to time directory under outputPath_
            // skip surface without faces (eg, a failed cut-plane)

            //Info << "mergeList_ size = " << mergeList_[surfI].faces.size() << nl;
            //Info << "allValues size = " << allValues.size() << nl;
            
            if (mergeList_[surfI].faces.size())
            {
                if (os.valid())
                {
                    os() << cTime << ' ';
                    
                    forAll(allValues,i)
                    {
                        const label& num = mergeList_[surfI].pointsMap[i];                  
                        os() << allValues[i] << " ";
                    }
                    
                    os() << nl;
                }
            }
        }
    }
    else
    {
        Info << "size = " << values.size() << nl;

        if (os.valid())
        {
            os() << cTime << ' ';
            
            forAll(values,i)
            {
                os() << values[i] << ' ';
            }
                    
            os() << nl;
        }
    }
}
